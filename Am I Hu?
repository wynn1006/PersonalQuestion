using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Text;

namespace Rextester
{
    public class Program
    {
        public static void Main(string[] args)
        {
            //Your code goes here
            //Console.WriteLine(CheckPair("122"));
            Console.WriteLine(CheckHu("12344566778888"));
            Console.WriteLine("You are now Tinging: " + CheckTingCards("1235668"));    
        }
        
        private static string CheckTingCards(string str) {
            if(str.Length < 4) return "No Ting.";
            var sb = new StringBuilder(str);
            var ret = new StringBuilder();
            
            int i = 0;
            for(char c = '1' ; c <= '9' ; c++) {
                while(i < sb.Length && c > sb[i]) i++;
                if(i == sb.Length) {
                    sb.Append(c);
                    if(CheckHu(sb.ToString())) ret.Append(c);
                    sb.Remove(sb.Length - 1, 1);
                } else {           
                    sb.Insert(i, c);
                    if(CheckHu(sb.ToString())) ret.Append(c);
                    sb.Remove(i, 1);
                }
            }
                            
            return ret.Length == 0 ? "No Ting." : ret.ToString() ;
        }
        
        private static bool CheckHu(string str) {
            if(str.Length < 5) return false;
            
            var dic = new Dictionary<char, int>();
            foreach(char c in str) {
                if(dic.ContainsKey(c)) dic[c]++;
                else dic.Add(c, 1);
            }
            
            for(char c = '1' ; c <= '9' ; c++) {
                if(!dic.ContainsKey(c)) continue;
                if(dic[c] >= 2) {
                    dic[c] -= 2;
                    if(CheckMultiplePairs(dic)) return true;
                    dic[c] += 2;
                }
            }
            return false;
        }
        private static bool CheckMultiplePairs(Dictionary<char, int> dic) {
            
            int currentAmt = 0;
            var cStr = new StringBuilder();
            
            foreach(var item in dic) {
                currentAmt += item.Value;
                for(int i = 0 ; i < item.Value ; i++) {
                    cStr.Append(item.Key);
                }
            }
            if(currentAmt == 0) return true;
            
            //Check Pong
            for(char c = '1' ; c <= '9' ; c++) {
                if(!dic.ContainsKey(c)) continue;
                if(dic[c] >= 3) {
                    dic[c] -= 3;
                    if(CheckMultiplePairs(dic)) return true;
                    dic[c] += 3;   
                } 
            }
            //Check Tsu
            for(char c = '1' ; c <= '7' ; c++) {
                char c1 = (char) (c + 1);
                char c2 = (char) (c + 2);
                if(!dic.ContainsKey(c) || !dic.ContainsKey(c1) || !dic.ContainsKey(c2)) continue;
                if(dic[c] >= 1 && dic[c1] >= 1 && dic[c2] >= 1) {
                    dic[c]--;
                    dic[c1]--;
                    dic[c2]--;
                    if(CheckMultiplePairs(dic)) return true;
                    dic[c]++;
                    dic[c1]++;
                    dic[c2]++;
                }
            }
            
            return false;
        }
    }
}
